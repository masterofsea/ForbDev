@page "/Mail/{ContractId:int}"

@using ForbexDAL.Data
@using ForbexDAL.Repositories.Contracts
@using ForbexBAL.MailBox.MessageBuilding.Contracts
@using JetBrains.Annotations

<PageTitle>Почта</PageTitle>

<h1>Отправляем запиську с Id = @ContractId.ToString()</h1>

<RadzenTemplateForm Submit="@OnSubmit" TItem="Message" Data="@Msg">
    <RadzenFieldset Text="Почтовый ящик">
        <div class="row" style="margin-bottom: 10px">
            <div class="col-md-1">
                <RadzenLabel Text="Кому:"/>
            </div>
            <div class="col-md-10">
                <RadzenTextBox Style="width: 100%" Name="Receiver" @bind-Value="@Msg.Receiver"/>
            </div>
        </div>
        <div class="row">
            <div class="col-md-1"></div>
            <div class="col-md-4">
                <RadzenRequiredValidator Style="font-size: small" Component="Receiver" Text="Необходимо ввести почтовый адрес отправителя"/>
                <RadzenEmailValidator Style="font-size: small" Component="Receiver" Text="Неверный формат Email"/>
            </div>
        </div>
        <div class="row">
            <div class="col-md-1">
                <RadzenLabel Text="Копия:"/>
            </div>
            <div class="col-md-10">
                <RadzenTextBox style="width: 100%" Name="Copy" @bind-Value="@Msg.Copy"/>
            </div>
        </div>
        <div class="row">
            <div class="col-md-1">
                <RadzenLabel Text="Шаблон:"/>
            </div>
            <div  class="col-md-10">
                <RadzenDropDown Style="width: 100%" Name="TemplateSelectField" TValue="string" Data="@Templates" @bind-Value="@CurrentTemplateName" 
                                Change="async _ => await OnTemplateChange()"/>
            </div>
        </div>
        <div class="row">
            <div class="col-md-1">
                <RadzenLabel Text="Тема:"/>
            </div>
            <div class="col-md-10">
                <RadzenTextBox Style="width: 100%" Name="Theme" @bind-Value="@Msg.Theme"/>
            </div>
        </div>
        <div class="row">
            <div class="col-md-1"></div>
            <div class="col-md-4">
                <RadzenRequiredValidator Style="font-size: small" Component="Theme" Text="Необходимо задать тему письма"/>
            </div>
        </div>
        <div class="row align-content-center">
            <div class="col-md-12">
                <RadzenTextArea Placeholder="Текст письма" Style="min-height: 250px; width: 100%" Name="MailBody" @bind-Value="@Msg.MessageBody"/>
            </div>
        </div>
        @*TODO реализовать стилизацию по примеру*@
        <div class="row">
            <div class="col-md-4">
                <RadzenRequiredValidator Style="font-size: small" Component="MailBody" Text="Письмо ничего не содержит"/>
            </div>
        </div>
        <div class="row">
            <div class="col-md-3">
                <RadzenButton ButtonType="ButtonType.Submit" Size="ButtonSize.Medium" Style="background-color: #3830d5" Text="Отправить"/>
            </div>
        </div>
    </RadzenFieldset>
</RadzenTemplateForm>


@code {
    [Parameter]
    public int ContractId { get; set; }

    [Inject]
    IContractsRepository ContractsRepository { get; set; } = null!;
    [Inject]
    ITemplatesRepository TemplatesRepository { get; set; } = null!;
    [Inject]
    IMessageBuilder MessageBuilder { get; set; } = null!;

    Contract? Contract { get; set; }
    IEnumerable<string> Templates { get; set; } = null!;
    string CurrentTemplateName { get; set; } = null!;
    Message Msg { get; } = new();
    
    async Task OnTemplateChange()
    {
        Msg.MessageBody = await MessageBuilder.BuildMessage(CurrentTemplateName, Contract!);

        Msg.Theme = CurrentTemplateName;
    }
    
    protected override async Task OnInitializedAsync()
    {
        Contract = await ContractsRepository.GetContractById(ContractId);

        Templates = await TemplatesRepository.GetAllTemplateNames();

        Msg.Receiver = Contract.Lessee.Email ?? string.Empty;
    }
    
    void OnSubmit(Message message)
    {
        Console.WriteLine($"Отправка письма: {message.MessageBody} этому человеку: {message.Receiver}");
    }

    [UsedImplicitly(ImplicitUseTargetFlags.Members)]
    class Message
    {
        public string Receiver { get; set; } = null!;
        
        public string? Copy { get; set; }
        
        public string Theme { get; set; } = null!;
        
        public string MessageBody { get; set; } = null!;
    }
}