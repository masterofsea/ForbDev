@page "/Mail/{ContractId:int}/{ReceiversEnum}"

@using ForbexDAL.Data
@using ForbexDAL.Repositories.Contracts
@using ForbexBAL.MailBox.MessageBuilding.Contracts
@using JetBrains.Annotations

<PageTitle>Почта</PageTitle>

<RadzenTemplateForm Submit="@OnSubmit" TItem="Message" Data="@Msg">
    <RadzenFieldset Text="Почтовый ящик">
        @* <div class="row"> *@
        @*     <div class="col-md-3"> *@
        @*         $1$ <RadzenLabel Component="SendToLessee"> #1# *@
        @*         $1$     <Template> #1# *@
        @*         $1$          #1# *@
        @*         $1$     </Template> #1# *@
        @*         $1$ </RadzenLabel> #1# *@
        @*     </div> *@
        @*     <div class="col-md-1"> *@
        @*         Отправить арендатору: *@
        @*         <RadzenSwitch Name="SendToLessee" Disabled="string.IsNullOrEmpty(Contract?.Lessee.Email)" @bind-Value="@SendToLessee"/> *@
        @*     </div> *@
        @*     <div class="col-md-3"> *@
        @*         <RadzenLabel Component="SendToPartner"> *@
        @*             <Template> *@
        @*                 Отправить партнеру: @Contract?.Partner.Email *@
        @*             </Template> *@
        @*         </RadzenLabel> *@
        @*     </div> *@
        @*     <div class="col-md-1"> *@
        @*         Отправить партнеру: *@
        @*         <RadzenSwitch Name="SendToPartner" Disabled="string.IsNullOrEmpty(Contract?.Partner.Email)" @bind-Value="@SendToPartner"/> *@
        @*     </div> *@
        @* </div> *@
        
        <div class="row">
            <div class="col-md-1">
                <RadzenLabel Text="Кому:"/>
            </div>
            <div class="col-md-10">
                <RadzenTextBox Style="width: 100%" Name="Receiver" @bind-Value="Msg.Receiver"/>
            </div>
        </div>
        <div class="row">
            <div class="col-md-1"></div>
            <div class="col-md-4">
                <RadzenRequiredValidator Style="font-size: small" Component="Receiver" Text="Необходимо ввести почтовый адрес отправителя"/>
                <RadzenEmailValidator Style="font-size: small" Component="Receiver" Text="Неверный формат Email"/>
            </div>
        </div>
        <div class="row">
            <div class="col-md-1">
                <RadzenLabel Text="Шаблон:"/>
            </div>
            <div class="col-md-10">
                <RadzenDropDown Style="width: 100%" Name="TemplateSelectField" TValue="string" Data="@Templates" @bind-Value="@CurrentTemplateName"
                                Change="async _ => await OnTemplateChange()"/>
            </div>
        </div>
        <div class="row">
            <div class="col-md-1">
                <RadzenLabel Text="Тема:"/>
            </div>
            <div class="col-md-10">
                <RadzenTextBox Style="width: 100%" Name="Theme" @bind-Value="@Msg.Theme"/>
            </div>
        </div>
        <div class="row">
            <div class="col-md-1"></div>
            <div class="col-md-4">
                <RadzenRequiredValidator Style="font-size: small" Component="Theme" Text="Необходимо задать тему письма"/>
            </div>
        </div>
        <div class="row align-content-center">
            <div class="col-md-12">
                <RadzenTextArea Placeholder="Текст письма" Style="min-height: 250px; width: 100%" Name="MailBody" @bind-Value="@Msg.MessageBody"/>
            </div>
        </div>
        @*TODO реализовать стилизацию по примеру*@
        <div class="row">
            <div class="col-md-4">
                <RadzenRequiredValidator Style="font-size: small" Component="MailBody" Text="Письмо ничего не содержит"/>
            </div>
        </div>
        <div class="row">
            <div class="col-md-3">
                <RadzenButton ButtonType="ButtonType.Submit" Size="ButtonSize.Medium" Style="background-color: #3830d5" Text="Отправить"/>
            </div>
        </div>
    </RadzenFieldset>
</RadzenTemplateForm>


@code {

    [Parameter]
    public int ContractId { get; set; }
    
    [Parameter]
    public string? ReceiversEnum { get; set; }

    [Inject]
    IContractsRepository ContractsRepository { get; set; } = null!;

    [Inject]
    ITemplatesRepository TemplatesRepository { get; set; } = null!;

    [Inject]
    IMessageBuilder MessageBuilder { get; set; } = null!;

    [Inject]
    NotificationService NotificationService { get; set; } = null!;

    Contract? Contract { get; set; }
    
    IEnumerable<string> Templates { get; set; } = null!;
    
    string CurrentTemplateName { get; set; } = null!;
    
    Message Msg { get; } = new();

    async Task OnTemplateChange()
    {
        Msg.MessageBody = await MessageBuilder.BuildMessage(CurrentTemplateName, Contract!);

        Msg.Theme = CurrentTemplateName;
    }

    protected override async Task OnInitializedAsync()
    {
        Contract = await ContractsRepository.GetContractById(ContractId);

        Templates = await TemplatesRepository.GetAllTemplateNames();

        if (string.IsNullOrEmpty(ReceiversEnum)) return;
        switch ((Receivers)Enum.Parse<Receivers>(ReceiversEnum))
        {
            case Receivers.Lessee:
                Msg.Receiver = Contract.Lessee.Email ?? string.Empty;
                break;
            case Receivers.Partner:
                Msg.Receiver = Contract.Partner.Email ?? string.Empty;
                break;
            case Receivers.All:
                Msg.Receiver = $"{Contract.Lessee.Email ?? string.Empty};{Contract.Partner.Email ?? string.Empty}";
                break;
            default:
                throw new ArgumentOutOfRangeException();
        }
        
    }

    void OnSubmit(Message message)
    {
        ShowNotification(new NotificationMessage 
        { 
            Severity = NotificationSeverity.Success, 
            Summary = "Отправка письма", 
            Detail = "Письмо успешно отправлено!", 
            Duration = 10000
        });
    }

    [UsedImplicitly(ImplicitUseTargetFlags.Members)]
    class Message
    {
        public string Receiver { get; set; } = null!;

        public string? Copy { get; set; }

        public string Theme { get; set; } = null!;

        public string MessageBody { get; set; } = null!;
    }

    void ShowNotification(NotificationMessage message)
    {
        NotificationService.Notify(message);
    }

}