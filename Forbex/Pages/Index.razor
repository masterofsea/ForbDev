@page "/"
@page "/contracts"
@using ForbexDAL.Data
@using ForbexDAL.Repositories.Contracts

<style>
    table {
      table-layout: auto !important;
      text-align: center;
    }
</style>

<RadzenDataGrid @ref="_contractsGrid" Data="@Contracts" TItem="Contract" AllowPaging="true" PageSize="20"
                AllowSorting="true" AllowMultiColumnSorting="true"
                AllowFiltering="true" LogicalFilterOperator="LogicalFilterOperator.Or"
                ColumnWidth="300px" RowRender="@RowRender" ExpandMode="DataGridExpandMode.Single" 
                CellContextMenu="@OnCellContextMenu">
                
    <Template Context="contract">
        <ContractDetails Contract="contract"/>
    </Template>
    <Columns>
        <RadzenDataGridColumn TItem="Contract" Property="ContractNumber" Title="–ù–æ–º–µ—Ä">
            <FooterTemplate>
                <b>@_contractsGrid.View.Count().ToString()</b> –∑–∞–ø–∏—Å–µ–π –∏–∑ <b>@Contracts?.Count().ToString()</b>
            </FooterTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Contract" Property="ConclusionDate" Title="–î–∞—Ç–∞ –∑–∞–∫–ª—é—á–µ–Ω–∏—è" FormatString="{0:d}"/>
        <RadzenDataGridColumn TItem="Contract" Property="LeaseStartDate" Title="–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞" FormatString="{0:d}"/>
        <RadzenDataGridColumn TItem="Contract" Property="LeaseEndDate" Title="–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è" FormatString="{0:d}"/>
        <RadzenDataGridColumn TItem="Contract" Property="LeaseTerm" Title="–°—Ä–æ–∫"/>
        <RadzenDataGridColumn TItem="Contract" Property="Address" Title="–ê–¥—Ä–µ—Å"/>
        <RadzenDataGridColumn TItem="Contract" Property="Paid" Title="–û–ø–ª–∞—á–µ–Ω–æ">
            <Template Context="data">
                @if (data.Paid)
                {
                    <RadzenBadge Style="height: 100%" BadgeStyle="BadgeStyle.Success" Text="–û–ü–õ–ê–ß–ï–ù–û"/>
                }
                else
                {
                    <RadzenBadge Style="height: 100%" BadgeStyle="BadgeStyle.Danger" Text="–ù–ï –û–ü–õ–ê–ß–ï–ù–û"/>
                }
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Sortable="false" Filterable="false" TItem="Contract" Property="Lessee" Title="–ê—Ä–µ–Ω–¥–∞—Ç–æ—Ä">
            <Template Context="data">
                <RadzenButton Click="@(async _ => await OpenLessee(data.Lessee))" Icon="view_in_ar" Text="@data.Lessee.Name" 
                              Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Secondary" Style="font-size: small"/>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Sortable="false" Filterable="false" TItem="Contract" Property="Partner" Title="–ü–∞—Ä—Ç–Ω–µ—Ä">
            <Template Context="data">
                @if (!string.IsNullOrEmpty(data.Partner.Name))
                {
                    <RadzenButton Click="@(async _ => await OpenPartner(data.Partner))" Icon="public" Text="@data.Partner.Name" 
                                  Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Secondary" Style="font-size: small"/>
                }
                else
                {
                    <RadzenBadge Style="width: 80%; height: 100%" IsPill="true" BadgeStyle="BadgeStyle.Danger" Text="–ù–µ—Ç –ø–∞—Ä—Ç–Ω—ë—Ä–∞"/>
                }
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Sortable="false" Filterable="false" TItem="Contract" Property="MailContract" Title="–î–æ–≥–æ–≤–æ—Ä –ü–û">
            <Template Context="data">
                @if (!string.IsNullOrEmpty(data.MailContract.MailContractNumber))
                {
                    <RadzenButton Click="@(async _ => await OpenMailContract(data.MailContract))" Icon="mail" Text="@data.MailContract.MailContractNumber" 
                                  Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Secondary" Style="font-size: small"/>
                }
                else
                {
                    <p style="color: #a5b9ea"><RadzenIcon Icon="mail_outline"/> –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç</p>
                }
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Contract" Context="contract" Filterable="false" Sortable="false" TextAlign="TextAlign.Left" Width="60px">
            <Template Context="contract">
                <RadzenButton ButtonStyle="ButtonStyle.Info" Icon="send" Size="ButtonSize.Small" Class="m-1" 
                              Click="@(_ => GoToLetterCreation(contract.Id))" @onclick:stopPropagation="true"/>
                @* <RadzenMenu> *@
                @*     $1$ <RadzenMenuItem Text="General" Icon="home"> #1# *@
                @*     $1$     <RadzenMenuItem Text="Buttons" Path="buttons" Icon="account_circle" Click="@(_ => GoToLetterCreation(contract.Id))" ></RadzenMenuItem> #1# *@
                @*     $1$     <RadzenMenuItem Text="Menu" Path="menu" Icon="line_weight" Click="@(async _ => await DeleteRow(contract))" ></RadzenMenuItem> #1# *@
                @*     $1$     <RadzenMenuItem Text="ChildClick" Icon="attach_file" Click="_ => GoToContractAdd(contract.Id)" ></RadzenMenuItem> #1# *@
                @*     $1$ </RadzenMenuItem> #1# *@
                @* </RadzenMenu> *@
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code
{
    [Inject]
    IContractsRepository ContractsRepository { get; set; } = null!;
    [Inject]
    NavigationManager NavManager { get; set; } = null!;
    [Inject]
    DialogService DialogService { get; set; } = null!;
    [Inject]
    ContextMenuService ContextMenuService { get; set; } = null!;


    RadzenDataGrid<Contract> _contractsGrid = null!;
    IEnumerable<Contract?>? Contracts { get; set; }

    protected override void OnInitialized()
    {
        Contracts = ContractsRepository.GetAllContracts();
    }

    private async Task DeleteRow(Contract contract)
    {
        await ContractsRepository.RemoveContractAsync(contract);

        await _contractsGrid.Reload();
    }

    private void GoToLetterCreation(int contractId) => NavManager.NavigateTo($"Mail/{contractId}");
    private void ContractProlongation(int contractId) => NavManager.NavigateTo($"ContractAdd/{contractId}");

    private async Task OpenLessee(Lessee lessee)
    {
        await DialogService.OpenAsync<LesseeCardPage>(lessee.Name,
            new Dictionary<string, object> { { "Lessee", lessee } },
            new DialogOptions { Width = "700px", Draggable = false, CloseDialogOnOverlayClick = true });
    }

    private async Task OpenPartner(Partner partner)
    {
        await DialogService.OpenAsync<PartnerCardPage>(partner.Name,
            new Dictionary<string, object> { { "Partner", partner } },
            new DialogOptions { Width = "700px", Draggable = false, CloseDialogOnOverlayClick = true });
    }

    private async Task OpenMailContract(MailContract mailContract)
    {
        await DialogService.OpenAsync<MailContractCardPage>(mailContract.MailContractNumber,
            new Dictionary<string, object> { { "MailContract", mailContract } },
            new DialogOptions { Width = "700px", Draggable = false, CloseDialogOnOverlayClick = true });
    }
    
    private void OpenCorrespondenceAdditionForm(Contract contract)
    {
        DialogService.Open<CorrespondenceAdditionFormPage>("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ—Ä—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ü–∏–∏",
            new Dictionary<string, object> { { "Correspondence", new Correspondence
            {
                Receiver = contract.Lessee,
                ReceivingAddress = contract.Address,
                SenderName = "CurrentUser"
            } } },
            new DialogOptions { Width = "700px", Draggable = false, CloseDialogOnOverlayClick = true });
    }
    
    void RowRender(RowRenderEventArgs<Contract> args)
    {
        args.Expandable = true;
    }
    
    void OnCellContextMenu(DataGridCellMouseEventArgs<Contract> args)
    {
        ContextMenuService.Open(args,
            new List<ContextMenuItem>
            {
                new() { Text = "üé´ –ü—Ä–æ–ª–æ–Ω–≥–∞—Ü–∏—è –¥–æ–≥–æ–≤–æ—Ä–∞", Value = ContractsContextMenuItems.Prolongation },
                new() { Text = "‚úâ –î–æ–±–∞–≤–∏—Ç—å –∫–æ—Ä—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ü–∏—é", Value = ContractsContextMenuItems.AddCorrespondence },
                new() { Text = "üóë –í –∫–æ—Ä–∑–∏–Ω—É", Value = ContractsContextMenuItems.DeleteRow },
            }, (e) =>
            {
                switch ((ContractsContextMenuItems)e.Value)
                {
                    case ContractsContextMenuItems.Prolongation:
                        ContractProlongation(args.Data.Id);
                        break;
                    case ContractsContextMenuItems.AddCorrespondence:
                        OpenCorrespondenceAdditionForm(args.Data);
                        break;
                    case ContractsContextMenuItems.DeleteRow:
                        DeleteRow(args.Data);
                        break;
                    default:
                        throw new ArgumentOutOfRangeException();
                }
            });
    }

    enum ContractsContextMenuItems
    {
        DeleteRow,
        AddCorrespondence,
        Prolongation
    }
}