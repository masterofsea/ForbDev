@page "/"
@page "/contracts"
@using ForbexDAL.Data
@using ForbexDAL.Repositories.Contracts


<PageTitle>Договоры Forbex</PageTitle>

@* @if (SelectedContracts?.Any() == true) *@
@* { *@
@*     <NavLink class="btn btn-sm btn-info" href="@GetMailUri(SelectedContracts.First().Id)"> *@
@*         Отправить письмо *@
@*     </NavLink> *@

<style>
    table {
      table-layout: auto !important;
      text-align: center;
    }
</style>
<RadzenDataGrid @ref="contractsGrid" Data="@Contracts" TItem="Contract" AllowPaging="true" PageSize="20"
                AllowSorting="true" AllowMultiColumnSorting="true"
                AllowFiltering="true" LogicalFilterOperator="LogicalFilterOperator.Or"
                SelectionMode="DataGridSelectionMode.Single" @bind-Value="@SelectedContracts"
                AllowColumnResize="false">
    <Columns>
        <FooterTemplate>
            Displayed orders: <b>@contractsGrid.View.Count().ToString()</b> of <b>@Contracts?.Count().ToString()</b>
        </FooterTemplate>
        <RadzenDataGridColumn TItem="Contract" Property="ContractNumber" Title="Номер"/>
        <RadzenDataGridColumn TItem="Contract" Property="ConclusionDate" Title="Дата заключения" FormatString="{0:d}"/>
        <RadzenDataGridColumn TItem="Contract" Property="LeaseStartDate" Title="Дата начала" FormatString="{0:d}"/>
        <RadzenDataGridColumn TItem="Contract" Property="LeaseEndDate" Title="Дата окончания" FormatString="{0:d}"/>
        <RadzenDataGridColumn TItem="Contract" Property="LeaseTerm" Title="Срок"/>
        <RadzenDataGridColumn TItem="Contract" Property="Address" Title="Адрес"/>
        <RadzenDataGridColumn TItem="Contract" Property="Paid" Title="Оплачено">
            <Template Context="data">
                @if (data.Paid)
                {
                     <RadzenBadge Style="width: 80%; height: 100%" BadgeStyle="BadgeStyle.Success" Text="ОПЛАЧЕНО" />
                }
                else
                {
                    <RadzenBadge Style="width: 80%; height: 100%" IsPill="true" BadgeStyle="BadgeStyle.Danger" Text="НЕ ОПЛАЧЕНО" />
                }
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Sortable="false" Filterable="false" TItem="Contract" Property="Lessee" Title="Арендатор">
            <Template Context="data">
                <RadzenButton Click="@(async _ => await OpenLessee(data.Lessee))" Icon="person" Text="@data.Lessee.Name"/>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Sortable="false" Filterable="false" TItem="Contract" Property="Partner" Title="Партнер">
            <Template Context="data">
                @if (!string.IsNullOrEmpty(data.Partner.Name))
                                {
                                     <RadzenButton Click="@(async _ => await OpenPartner(data.Partner))" Icon="person" Text="@data.Partner.Name"/>
                                }
                                else
                                {
                                    <RadzenBadge Style="width: 80%; height: 100%" IsPill="true" BadgeStyle="BadgeStyle.Danger" Text="Нет партнёра" />
                                }
                
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Sortable="false" Filterable="false" TItem="Contract" Property="MailContract" Title="Договор ПО">
            <Template Context="data">
                @if (!string.IsNullOrEmpty(data.MailContract.MailContractNumber))
                {
                    <RadzenButton Click="@(async _ => await OpenMailContract(data.MailContract))" Icon="person" Text="@data.MailContract.MailContractNumber"/>
                }
                else
                {
                    <p style="color: #a5b9ea"><RadzenIcon Icon="mail_outline"/> Отсутствует</p>
                }
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Contract" Context="contract" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="60px">
            <Template Context="contract">
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Size="ButtonSize.Small" Class="m-1" Click="@(_ => DeleteRow(contract))"
                              @onclick:stopPropagation="true">
                </RadzenButton>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Contract" Context="contract" Filterable="false" Sortable="false" TextAlign="TextAlign.Left" Width="60px">
            <Template Context="contract">
                <RadzenButton ButtonStyle="ButtonStyle.Info" Icon="send" Size="ButtonSize.Small" Class="m-1" Click="@(_ => GoToLetterCreation(contract.Id))"
                              @onclick:stopPropagation="true">
                </RadzenButton>
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code
{
    RadzenDataGrid<Contract> contractsGrid;
    [Inject]
    IContractsRepository ContractsRepository { get; set; }
    [Inject]
    NavigationManager NavManager { get; set; }
    [Inject]
    DialogService DialogService { get; set; }
    
    IEnumerable<Contract?>? Contracts { get; set; }
    IList<Contract>? SelectedContracts { get; set; }

    protected override void OnInitialized()
    {
        Contracts = ContractsRepository.GetAllContracts();
    }

    private async Task DeleteRow(Contract contract)
    {
        await ContractsRepository.RemoveContractAsync(contract);
        
        await contractsGrid.Reload();
    }

    private void GoToLetterCreation(int contractId)
    {
        NavManager.NavigateTo($"Mail/{contractId}");
    }

    private async Task OpenLessee(Lessee lessee)
    {
        await DialogService.OpenAsync<LesseeCardPage>(lessee.Name, 
            new Dictionary<string, object> { { "Lessee", lessee } },
            new DialogOptions { Width = "700px", Height = "570px", Resizable = true, Draggable = false });
    }
    
    private async Task OpenPartner(Partner partner)
    {
        await DialogService.OpenAsync<PartnerCardPage>(partner.Name, 
            new Dictionary<string, object> { { "Partner", partner } },
            new DialogOptions { Width = "700px", Height = "570px", Resizable = true, Draggable = false });
    }
    
    private async Task OpenMailContract(MailContract mailcontract)
    {
        await DialogService.OpenAsync<MailContractCardPage>(mailcontract.MailContractNumber, 
            new Dictionary<string, object> { { "MailContract", mailcontract } },
            new DialogOptions { Width = "700px", Height = "570px", Resizable = true, Draggable = false });
    }
}